---
title: "Observable JS"
format: html
execute:
  echo: false
---

```{r, message = FALSE}
library(ggplot2)
library(tidyverse)
library(plotly)
```

Here we visualise the [palmer penguins](https://allisonhorst.github.io/palmerpenguins/) 
data in R using plotly.


```{r}
p <- palmerpenguins::penguins |>
  drop_na(flipper_length_mm, body_mass_g) |>
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species), size = 3, alpha = 0.8) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin size, Palmer Station LTER",
       subtitle = "Flipper length and body mass for Adelie, Chinstrap and Gentoo Penguins",
       x = "Flipper length (mm)",
       y = "Body mass (g)",
       color = "Penguin species",
       shape = "Penguin species")

plotly::ggplotly(p)
```

Further interactively can be achieved with observable JS, and we can make the R 
tibble available to observable using `ojs_define`.

```{r}
ojs_define(data = palmerpenguins::penguins)
```

With data available to observable JS, we can generate an interactive plot.


```{ojs}
viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe"], 
    label: "Islands:"
  }
)
```

```{ojs}
filtered = transpose(data).filter(function(penguin) {
  return bill_length_min < penguin.bill_length_mm &&
         islands.includes(penguin.island);
})
```

```{ojs}
Plot.rectY(filtered, 
  Plot.binX(
    {y: "count"}, 
    {x: "body_mass_g", fill: "species", thresholds: 20}
  ))
  .plot({
    facet: {
      data: filtered,
      x: "sex",
      y: "species",
      marginRight: 80
    },
    marks: [
      Plot.frame(),
    ]
  }
)
```
